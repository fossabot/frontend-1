block( 'tour' ).elem( 'features' )(
  match( ( node, ctx ) => !ctx.content ).def()( '' ),

  match( ( node, ctx ) => ctx.content ).replace()( ( node, { content } ) => {

    if ( node.elemMods.languages ) {
      content.push( [
        {
          block: 'text',
          mods: {
            weight: 'bold'
          },
          content: '–Ø–∑—ã–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏'
        },
        ': üá®üá∑ üáæüá™ üá±üáæ'
      ] );
    }

    if ( node.elemMods['on-vehicle'] ) {
      content.push( [
        {
          block: 'text',
          mods: {
            weight: 'bold'
          },
          content: '–ù–∞ –±–æ—Ä—Ç—É'
        },
        ': —Ç—É–∞–ª–µ—Ç, —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è.'
      ] );
    }

    if ( node.elemMods.vehicle ) {
      content.push( [
        {
          block: 'text',
          mods: {
            weight: 'bold'
          },
          content: '–¢–µ–ø–ª–æ—Ö–æ–¥'
        },
        ': –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –æ—Ç–∞–ø–ª–∏–≤–∞–µ–º—ã–π –¥–≤—É—Ö–ø–∞–ª—É–±–Ω—ã–π —Ç–µ–ø–ª–æ—Ö–æ–¥ —Å –∑–∞–∫—Ä—ã—Ç–æ–π –∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–∞–ª—É–±–æ–π –∫–ª–∞—Å—Å–∞ ¬´–ú–æ—Å–∫–≤–∞¬ª.'
      ] );
    }

    if ( node.elemMods.route ) {
      content.push( {
        block: 'link',
        url: '#route',
        content: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–≥—É–ª–∫–∏.'
      } );
    }

    return {
      block: 'list',
      mods: {
        type: 'circle',
        of: 'features'
      },
      mix: { block: node.block, elem: node.elem },
      items: content
    }
  } ),
)
